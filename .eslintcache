[{"E:\\Projects\\kanban\\src\\eruda.js":"1","E:\\Projects\\kanban\\src\\components\\App.tsx":"2","E:\\Projects\\kanban\\src\\components\\Columns.tsx":"3","E:\\Projects\\kanban\\src\\index.tsx":"4","E:\\Projects\\kanban\\src\\components\\Desks.tsx":"5","E:\\Projects\\kanban\\src\\components\\DeskList.tsx":"6","E:\\Projects\\kanban\\src\\components\\DeskItem.tsx":"7","E:\\Projects\\kanban\\src\\components\\DeskCreate.tsx":"8","E:\\Projects\\kanban\\src\\context\\alert-context.tsx":"9","E:\\Projects\\kanban\\src\\context\\snackbar-context.tsx":"10"},{"size":191,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":699,"mtime":1616840333035,"results":"13","hashOfConfig":"12"},{"size":529,"mtime":1616830445262,"results":"14","hashOfConfig":"12"},{"size":1367,"mtime":1616840002858,"results":"15","hashOfConfig":"12"},{"size":1588,"mtime":1616948546354,"results":"16","hashOfConfig":"12"},{"size":518,"mtime":1616946930989,"results":"17","hashOfConfig":"12"},{"size":224,"mtime":1616830466067,"results":"18","hashOfConfig":"12"},{"size":4106,"mtime":1616949200710,"results":"19","hashOfConfig":"12"},{"size":869,"mtime":1616838511607,"results":"20","hashOfConfig":"12"},{"size":846,"mtime":1616839936871,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"19623is",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\Projects\\kanban\\src\\eruda.js",[],[],"E:\\Projects\\kanban\\src\\components\\App.tsx",[],"E:\\Projects\\kanban\\src\\components\\Columns.tsx",[],"E:\\Projects\\kanban\\src\\index.tsx",[],"E:\\Projects\\kanban\\src\\components\\Desks.tsx",[],"E:\\Projects\\kanban\\src\\components\\DeskList.tsx",[],"E:\\Projects\\kanban\\src\\components\\DeskItem.tsx",[],"E:\\Projects\\kanban\\src\\components\\DeskCreate.tsx",["44"],"import React, { FormEventHandler, useCallback, useState } from \"react\";\r\nimport { useForm, InitialFormType } from \"@asosunoff/react_use_form\";\r\nimport firebase from \"firebase/app\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Div,\r\n  FormItem,\r\n  FormLayout,\r\n  FormLayoutGroup,\r\n  Input,\r\n  Snackbar,\r\n} from \"@vkontakte/vkui\";\r\nimport { Icon24Add, Icon24DeleteOutline } from \"@vkontakte/icons\";\r\nimport { useAlertContext } from \"../context/alert-context\";\r\nimport { useSnackbarContext } from \"../context/snackbar-context\";\r\nimport { IDesks } from \"../Interfaces/IDesks\";\r\n\r\ntype Modes = \"button\" | \"form\";\r\n\r\nconst FORM: InitialFormType<\"name\"> = {\r\n  name: {\r\n    value: \"\",\r\n    validation: (value) => {\r\n      if (!value.trim()) {\r\n        return { errorMessage: \"необходимо ввести наименование\" };\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\ninterface DeskCreateProps {\r\n  onCreate: (desk: IDesks) => void;\r\n}\r\n\r\nconst DeskCreate: React.FC<DeskCreateProps> = ({ onCreate }) => {\r\n  const { handlers, values, resetHandler, isInvalidForm } = useForm(FORM);\r\n\r\n  const [mode, setMode] = useState<Modes>(\"button\");\r\n\r\n  const { setPopoutHandler } = useAlertContext();\r\n\r\n  const { setSnackbarHandler } = useSnackbarContext();\r\n\r\n  const createDeskHandler = useCallback<FormEventHandler<HTMLElement>>(\r\n    async (event) => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      if (isInvalidForm) {\r\n        setPopoutHandler(\r\n          <Alert\r\n            header=\"Внимание\"\r\n            text=\"Не все обязательные поля заполнены\"\r\n            actions={[\r\n              {\r\n                title: \"Понял\",\r\n                mode: \"destructive\",\r\n                autoclose: true,\r\n              },\r\n            ]}\r\n            actionsLayout=\"vertical\"\r\n            onClose={() => setPopoutHandler(null)}\r\n          />\r\n        );\r\n      } else {\r\n        try {\r\n          const db = firebase.firestore();\r\n\r\n          const docRef = await db.collection(\"desks\").add({\r\n            name: values.name,\r\n          });\r\n\r\n          const doc = await docRef.get();\r\n\r\n          const data = doc.data();\r\n\r\n          /* const { name } = data || {}; */\r\n\r\n          onCreate({ id: doc.id, name: (data as any).name });\r\n\r\n          setSnackbarHandler(\r\n            <Snackbar onClose={() => setSnackbarHandler(null)}>\r\n              Добавдена новая доска \"{name}\"\r\n            </Snackbar>\r\n          );\r\n\r\n          setMode(\"button\");\r\n\r\n          resetHandler();\r\n        } catch (error) {\r\n          console.error(\"Error writing document: \", error);\r\n        }\r\n      }\r\n    },\r\n    [values]\r\n  );\r\n\r\n  if (mode === \"button\") {\r\n    return (\r\n      <Div>\r\n        <Button size=\"l\" stretched before={<Icon24Add />} onClick={() => setMode(\"form\")}>\r\n          Создать доску\r\n        </Button>\r\n      </Div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FormLayout onSubmit={createDeskHandler}>\r\n      <FormItem\r\n        top=\"Наименование доски\"\r\n        status={handlers.name.error && handlers.name.touched ? \"error\" : \"valid\"}\r\n        bottom={\r\n          handlers.name.error && handlers.name.touched ? handlers.name.error.errorMessage : \"\"\r\n        }\r\n      >\r\n        <Input\r\n          autoFocus\r\n          value={handlers.name.value}\r\n          onChange={handlers.name.onChange}\r\n          placeholder=\"введите название доски\"\r\n        />\r\n      </FormItem>\r\n\r\n      <FormLayoutGroup mode=\"horizontal\">\r\n        <FormItem>\r\n          <Button size=\"l\" stretched before={<Icon24Add />} onClick={createDeskHandler}>\r\n            Создать доску\r\n          </Button>\r\n        </FormItem>\r\n\r\n        <FormItem>\r\n          <Button\r\n            size=\"l\"\r\n            stretched\r\n            onClick={() => setMode(\"button\")}\r\n            before={<Icon24DeleteOutline />}\r\n            mode=\"tertiary\"\r\n            color=\"red\"\r\n          >\r\n            Отменить\r\n          </Button>\r\n        </FormItem>\r\n      </FormLayoutGroup>\r\n    </FormLayout>\r\n  );\r\n};\r\n\r\nexport { DeskCreate };\r\n","E:\\Projects\\kanban\\src\\context\\alert-context.tsx",[],"E:\\Projects\\kanban\\src\\context\\snackbar-context.tsx",[],{"ruleId":null,"fatal":true,"severity":2,"message":"45","line":81,"column":46},"Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 79 |\u001b[39m           \u001b[90m/* const { name } = data || {}; */\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 80 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 81 |\u001b[39m           onCreate({ id\u001b[33m:\u001b[39m doc\u001b[33m.\u001b[39mid\u001b[33m,\u001b[39m name\u001b[33m:\u001b[39m (data \u001b[36mas\u001b[39m any)\u001b[33m.\u001b[39mname })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 82 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 83 |\u001b[39m           setSnackbarHandler(\u001b[0m\n\u001b[0m \u001b[90m 84 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mSnackbar\u001b[39m onClose\u001b[33m=\u001b[39m{() \u001b[33m=>\u001b[39m setSnackbarHandler(\u001b[36mnull\u001b[39m)}\u001b[33m>\u001b[39m\u001b[0m"]